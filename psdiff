#!/usr/bin/env python
# psdiff (part of ossobv/vcutil) // wdoekes/2016 // Public Domain
#
# Generic (coarse) monitoring of daemon processes. Use in conjunction
# with a monitoring suite like Zabbix.
#
import argparse
import difflib
import os
import re
import subprocess
import sys
import textwrap
import time


class Process(object):
    split = re.compile(r'\s+')

    @classmethod
    def from_line(cls, line, root):
        args = cls.split.split(line, 3)

        user = args[0]
        pid = int(args[1])
        ppid = int(args[2])
        exe = args[3][0:8].rstrip()
        assert args[3][8] == ' '
        cmdline = args[3][9:]

        return cls(ppid, pid, user, exe, cmdline, root=root)

    def __init__(self, parent, pid, user, exe, cmdline, root=None):
        self.parent = parent
        self.pid = pid
        self.user = user
        self.exe = exe
        self.cmdline = cmdline
        self.root = root or self

        if not root:
            self.process_map = {}

        self.root.process_map[pid] = self
        self.children = set()

    def has_parent(self, include_self=False,
                   cmdline__startswith=None, pid=None):
        obj = self
        if not include_self:
            obj = obj.parent

        while obj:
            if (cmdline__startswith is not None and
                    obj.cmdline.startswith(cmdline__startswith)):
                return True
            if pid is not None and obj.pid == pid:
                return True
            obj = obj.parent

        return False

    def fix_links(self):
        if self.parent is not None:
            # Convert ppid to parent.
            self.parent = self.root.process_map[self.parent]
            # Add us as child of the parent.
            self.parent.children.add(self)

    def get_process(self, pid):
        if not pid:
            return None
        return self.root.process_map[pid]

    def to_string(self, indent=0):
        return '{0}{1}  {{user={2}}}'.format(
            indent * '  ', self.cmdline.rstrip(), self.user)

    def __str__(self):
        return self.to_string()


class ProcessFormatter(object):
    def __init__(self, root):
        self.root = root

    def include(self, process):
        return True

    def to_string(self, process, indent=0):
        return self.process.to_string(indent)

    def to_strings(self, process, indent=0):
        ret = []
        if self.include(process):
            ret.append(self.to_string(process, indent))
        # TODO: We may need to take children of children into account as
        # well. Lazy keys anyone?
        for child in sorted(process.children, key=(
                lambda x: (x.cmdline, x.user, len(x.children)))):
            ret.extend(self.to_strings(child, indent + 1))
        return ret

    def __str__(self):
        return '\n'.join(self.to_strings(self.root)) + '\n'


class FilteredProcessFormatter(ProcessFormatter):
    def __init__(self, *args, **kwargs):
        super(FilteredProcessFormatter, self).__init__(*args, **kwargs)
        self._include_once = set()

    def include(self, process):
        # Ignore kernel threads.
        if process.has_parent(include_self=True, pid=2):
            return False

        # Children of these commands are generally not daemons, skip
        # them:
        if process.has_parent(include_self=True, cmdline__startswith=(
                'sshd:', 'CRON', 'SCREEN',
                '/USR/SBIN/CRON',  # older cron
                '/usr/sbin/CRON',  # newer cron
                # Is a daemon, but spawns children of init for extra work.
                '/usr/bin/python /usr/bin/salt-minion',
                # User systemd comes and goes as it pleases with (sd-pam).
                '/lib/systemd/systemd --user')):
            return False

        # We want to monitor these daemons, but not their
        # (grand)children, as they come and go:
        if process.has_parent(include_self=False, cmdline__startswith=(
                '/usr/lib/postfix/master',          # debian/ubuntu
                '/usr/lib/postfix/sbin/master',     # ubuntu16.04+
                '/usr/libexec/postfix/master',      # redhat
                '/usr/lib/postgresql/',
                '/usr/sbin/dovecot ',
                '/usr/sbin/vsftpd',
                '/usr/sbin/zabbix_agentd')):
            return False

        # These children may come and go, but we expect at least one:
        # - multiprocess apache creates at least N processes but may add/remove
        #   based on demand
        if process.cmdline.startswith((
                '/usr/sbin/apache2 ',       # debian/ubuntu
                '/usr/sbin/httpd ')):       # redhat
            key = (process.parent.pid, process.user, process.cmdline)
            if key in self._include_once:
                return False
            else:
                self._include_once.add(key)

        return super(FilteredProcessFormatter, self).include(process)

    def to_string(self, process, indent):
        if process.cmdline.startswith((
                'astcanary',  # astcanary /var/run/asterisk/... <pid>
                '/usr/sbin/amavisd-new ')):
            process.cmdline = process.cmdline.split(' ', 1)[0]

        return process.to_string(indent)


def diff(a, b):
    a = a.rstrip().split('\n')  # drop trailing LF
    b = b.rstrip().split('\n')  # drop trailing LF
    if len(a) == 1 and not a[0]:
        a = []
    if len(b) == 1 and not b[0]:
        b = []

    changes = []
    remap = {' ': 0, '-': -1, '+': 1}
    for change in difflib.ndiff(a, b):
        if change[0] != '?':
            changes.append((remap[change[0]], change[1:]))

    return changes


def ps_faxu():
    cmd = ['ps', 'ax', '-o', 'user,pid,ppid,fname,args']
    try:
        output = subprocess.check_output
    except AttributeError:
        # Blegh. Python 2.6. (You did already `pip install argparse`, yes?)
        proc = subprocess.Popen(cmd, bufsize=-1, stdout=subprocess.PIPE)
        output = proc.communicate()[0]
        proc.wait()
    else:
        output = subprocess.check_output(cmd, bufsize=-1)
    output = output.decode('ascii', 'replace')

    root = Process(None, 0, 'root', 'root', 'root')
    for i, line in enumerate(output.split('\n')):
        if i == 0 or not line:
            pass
        else:
            Process.from_line(line, root)

    # Update processes with proper links. This must be done last because
    # the process output is unordered and we may not have the parent
    # process info yet earlier.
    for process in root.process_map.values():
        process.fix_links()

    return root


def get_formatter_class():
    for path in ('/usr/local/etc/psdiff.conf', '/etc/psdiff.conf'):
        # First check, and then open without exception handling. That way we
        # see if anything is wrong with permissions and such.
        if os.path.exists(path):
            with open(path, 'r') as fh:
                source = fh.read()
            # Ooohh.. eval/exec. Supply FilteredProcessFormatter and
            # ProcessFormatter so they can be used as superclass.
            io = {
                'FilteredProcessFormatter': FilteredProcessFormatter,
                'ProcessFormatter': ProcessFormatter,
            }
            exec(source, io)
            return io['LocalFilteredProcessFormatter']

    # Nothing found? Return the plain version.
    return FilteredProcessFormatter


def get_new_output(formatter_class):
    root = ps_faxu()
    formatter = formatter_class(root)
    return str(formatter)


def main():
    parser = argparse.ArgumentParser(
        prog='psdiff',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Monitor differences between the list of expected running processes
            and the actual running processes.
            '''),
        epilog=textwrap.dedent('''\
            Expected usage
            --------------

            - set up server with various processes;
            - run `psdiff write' to store a dump in /var/lib/psdiff.db;
            - have zabbix (or your favorite monitoring tool) call
              `psdiff show-missing' and `psdiff show-extra';
            - have the monitoring tool show errors if there is output for any
              of the commands.

            This is just a STARTING POINT, it is NOT a replacement for DETAILED
            process monitoring. You will still want to add daemon-specific
            monitoring through other means.

            Adjustments
            -----------

            On startup, an attempt is made to import /usr/local/etc/psdiff.conf
            or /etc/psdiff.conf (a python file) where it looks for a class
            called `LocalFilteredProcessFormatter', which will be used as
            formatter class instead of the builtin FilteredProcessFormatter.

            For example:

                class LocalFilteredProcessFormatter(
                        FilteredProcessFormatter):
                    def include(self, process):
                        # I don't care about atop(1) and its fluctuating
                        # arguments.
                        if process.cmdline.startswith(
                                '/usr/bin/atop '):
                            return False

                        return (
                            super(LocalFilteredProcessFormatter, self)
                            .include(process))
                # vim: set syn=python:

            Zabbix example
            --------------

                UserParameter=psdiff.missing,psdiff show-missing --retry 2>&1
                UserParameter=psdiff.extra,psdiff show-extra --retry 2>&1

            With triggers like this:

                {Template Role Daemons:psdiff.missing.strlen()}<>0 or
                {Template Role Daemons:psdiff.missing.nodata(30m)}=1
            '''))

    parser.add_argument(
        'action', nargs='?', default='show',
        help="which action to perform; defaults to `show'",
        choices=('show', 'show-extra', 'show-missing', 'dump', 'write'))
    parser.add_argument(
        '--retry', action='store_true',
        help=("retry `show' and friends up to 2 seconds; avoids false "
              "positives caused by restarts and short lived children"))
    args = parser.parse_args()

    if (args.retry and
            args.action not in ('show', 'show-extra', 'show-missing')):
        parser.error("--retry works with the `show' and related actions only")

    # First load up config.
    formatter_class = get_formatter_class()

    # Then load up old db.
    try:
        with open('/var/lib/psdiff.db', 'r') as fh:
            old_output = fh.read()
    except IOError as e:
        if e.errno != 2:  # no such file
            raise
        old_output = ''

    process(args, old_output, formatter_class)


def process(args, old_output, formatter_class):
    if args.action == 'dump':
        new_output = get_new_output(formatter_class)
        print(new_output[0:-1])  # without trailing LF

    elif args.action == 'write':
        new_output = get_new_output(formatter_class)
        if old_output != new_output:
            with open('/var/lib/psdiff.new', 'w') as fh:
                fh.write(new_output)
            if old_output:
                os.rename('/var/lib/psdiff.db', '/var/lib/psdiff.old')
            os.rename('/var/lib/psdiff.new', '/var/lib/psdiff.db')
            print('Wrote to /var/lib/psdiff.db')
        else:
            print('No changes to /var/lib/psdiff.db')

    else:
        assert args.action.startswith('show'), args

        # If args.retry, then try fetching a changeset for 5 times
        # before concluding that something really has changed.
        for sleeptime in (0.1, 0.3, 0.6, 1.0, 0):
            new_output = get_new_output(formatter_class)

            # Quick optimization.
            if old_output == new_output:
                changes = ()
                break

            changes = diff(old_output, new_output)

            # There are changes. If we're not retrying, start showing
            # the results.
            if not args.retry or not sleeptime:
                break

            # Do the changes apply to us?
            if args.action == 'show-missing' and not any(
                    which < 0 for which, line in changes):
                break
            if args.action == 'show-extra' and not any(
                    which > 0 for which, line in changes):
                break

            # Sleep a while.
            time.sleep(sleeptime)

        # Show changes, if any.
        status = 0
        for which, line in changes:
            if which < 0 and args.action in ('show', 'show-missing'):
                print('-{0}'.format(line))
                status = 1
            elif which > 0 and args.action in ('show', 'show-extra'):
                print('+{0}'.format(line))
                status = 1

        sys.exit(status)  # possibly non-zero exit


if __name__ == '__main__':
    main()
# vim: set ts=8 sw=4 sts=4 et ai:
